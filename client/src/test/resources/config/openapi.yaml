openapi: 3.0.0
info:
  version: 1.0.0
  title: OAuth2 Client Registration
  description: OAuth2 Client Registration microservices endpoints.
  contact:
    email: stevehu@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
   - url: 'https://oauth2.networknt.com'    
paths:
  /oauth2/client:
    post:
      description: Return a client object
      operationId: createClient
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
      security:
        - client_auth:
            - portal.w
      requestBody:
        $ref: '#/components/requestBodies/Client'
    put:
      description: Return the updated client
      operationId: updateClient
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
      security:
        - client_auth:
            - portal.w
      requestBody:
        $ref: '#/components/requestBodies/Client'
    get:
      description: Return all clients
      operationId: getAllClient
      parameters:
        - name: page
          in: query
          description: Page number
          required: true
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: Pag size
          required: false
          schema:
            type: integer
            format: int32
        - name: clientName
          in: query
          description: Partial clientName for filter
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
      security:
        - client_auth:
            - portal.r
  '/oauth2/client/{clientId}':
    delete:
      description: Delete a client by Id
      operationId: deleteClient
      parameters:
        - name: clientId
          in: path
          description: Client Id
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid clientId supplied
        '404':
          description: Client not found
      security:
        - client_auth:
            - portal.w
    get:
      description: Get a client by Id
      operationId: getClient
      parameters:
        - name: clientId
          in: path
          description: Client Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '400':
          description: Invalid clientId supplied
        '404':
          description: Client not found
      security:
        - client_auth:
            - portal.r
  '/oauth2/client/{clientId}/service':
    delete:
      description: Delete all associated services for a client by clientId
      operationId: deleteAllClientService
      parameters:
        - name: clientId
          in: path
          description: Client Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        '404':
          description: Client not found
      security:
        - client_auth:
            - portal.w
    get:
      description: Get all associated services and endpoints by clientId
      operationId: getAllClientService
      parameters:
        - name: clientId
          in: path
          description: Client Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        '404':
          description: Client not found
      security:
        - client_auth:
            - portal.r
  '/oauth2/client/{clientId}/service/{serviceId}':
    post:
      description: Link a service and its endpoints to a client
      operationId: linkClientService
      parameters:
        - name: clientId
          in: path
          description: Client Id
          required: true
          schema:
            type: string
        - name: serviceId
          in: path
          description: Service Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        '404':
          description: Client or service not found
      security:
        - client_auth:
            - portal.w
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        description: A list of endpoints that needs to be linked to the client
        required: true
    delete:
      description: Delete all endpoints of a service for a client
      operationId: deleteClientService
      parameters:
        - name: clientId
          in: path
          description: Client Id
          required: true
          schema:
            type: string
        - name: serviceId
          in: path
          description: Service Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        '404':
          description: Client or service not found
      security:
        - client_auth:
            - portal.w
    get:
      description: Get linked endpoints of a service from a client
      operationId: getClientService
      parameters:
        - name: clientId
          in: path
          description: Client Id
          required: true
          schema:
            type: string
        - name: serviceId
          in: path
          description: Service Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
        '404':
          description: Client or service not found
      security:
        - client_auth:
            - portal.r
components:
  requestBodies:
    Client:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Client'
      description: Client object that needs to be added
      required: true
  securitySchemes:
    client_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://localhost:8888/oauth2/code'
          scopes:
            portal.w: write from light-portal
            portal.r: read from light-portal
  schemas:
    Client:
      type: object
      required:
        - clientType
        - clientProfile
        - clientName
        - clientDesc
        - host
        - scope
      properties:
        clientId:
          type: string
          description: a unique client id
        clientSecret:
          type: string
          description: client secret
        clientType:
          type: string
          description: client type
          enum:
            - confidential
            - public
            - trusted
            - external
        clientProfile:
          type: string
          description: client profile
          enum:
            - webserver
            - browser
            - mobile
            - service
            - batch
        clientName:
          type: string
          description: client name
        clientDesc:
          type: string
          description: client description
        ownerId:
          type: string
          description: client owner id
        host:
          type: string
          description: client host
        scope:
          type: string
          description: client scope separated by space
        customClaim:
          type: string
          description: custom claim string in JSON format
        redirectUri:
          type: string
          description: redirect uri
        authenticateClass:
          type: string
          description: authenticate class
        derefClientId:
          type: string
          description: the client that can call de-reference token endpoint
