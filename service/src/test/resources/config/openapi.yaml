openapi: 3.0.0
info:
  version: 1.0.0
  title: OAuth2 Service Registration
  description: OAuth2 Service Registration microservices endpoints.
  contact:
    email: stevehu@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'https://oauth2.networknt.com'    
paths:
  /oauth2/service:
    post:
      description: Return a service object
      operationId: createService
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
      security:
        - service_auth:
            - portal.w
      requestBody:
        $ref: '#/components/requestBodies/Service'
    put:
      description: Return the updated service
      operationId: updateService
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
      security:
        - service_auth:
            - portal.w
      requestBody:
        $ref: '#/components/requestBodies/Service'
    get:
      description: Return all services
      operationId: getAllService
      parameters:
        - name: page
          in: query
          description: Page number
          required: true
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: Pag size
          required: false
          schema:
            type: integer
            format: int32
        - name: host
          in: query
          description: Partial host name for filter
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
      security:
        - service_auth:
            - portal.r
  '/oauth2/service/{serviceId}':
    delete:
      description: Delete a service by Id
      operationId: deleteService
      parameters:
        - name: serviceId
          in: path
          description: Service Id
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid serviceId supplied
        '404':
          description: Service not found
      security:
        - service_auth:
            - portal.w
    get:
      description: Get a service by Id
      operationId: getService
      parameters:
        - name: serviceId
          in: path
          description: Service Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          description: Invalid serviceId supplied
        '404':
          description: Service not found
      security:
        - service_auth:
            - portal.r
            - portal.w
  '/oauth2/service/{serviceId}/endpoint':
    post:
      description: create endpoints for service
      operationId: createServiceEndpoint
      parameters:
        - name: serviceId
          in: path
          description: Service Id
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Successful response
      security:
        - service_auth:
            - portal.w
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ServiceEndpoint'
        description: A list of endpoint object
        required: true
    delete:
      description: Delete all endpoints for a service
      operationId: deleteServiceEndpoint
      parameters:
        - name: serviceId
          in: path
          description: Service Id
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid serviceId supplied
        '404':
          description: Service not found
      security:
        - service_auth:
            - portal.w
    get:
      description: Get all endpoints for a service
      operationId: getServiceEndpoint
      parameters:
        - name: serviceId
          in: path
          description: Service Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceEndpoint'
        '400':
          description: Invalid serviceId supplied
        '404':
          description: ServiceEndpoint not found
      security:
        - service_auth:
            - portal.r
            - portal.w
components:
  requestBodies:
    Service:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Service'
      description: Service object that needs to be added
      required: true
  securitySchemes:
    service_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://localhost:8888/oauth2/code'
          scopes:
            portal.w: write from light-portal
            portal.r: read from light-portal
  schemas:
    Service:
      type: object
      required:
        - serviceId
        - serviceName
        - serviceType
        - host
      properties:
        serviceId:
          type: string
          description: a unique service id
        serviceType:
          type: string
          description: service type
          enum:
            - openapi
            - graphql
            - hybrid
        serviceName:
          type: string
          description: service name
        serviceDesc:
          type: string
          description: service description
        ownerId:
          type: string
          description: service owner userId
        host:
          type: string
          description: service host
        scope:
          type: string
          description: service scopes separated by space, only use it if all endpoints share the same scopes.
    ServiceEndpoint:
      type: object
      required:
        - endpoint
        - operation
        - scope
      properties:
        endpoint:
          type: string
          description: a combination of path and method to uniquely identify an operation
        operation:
          type: string
          description: operationId of the endpoint
        scope:
          type: string
          description: scope associated with the endpoint
